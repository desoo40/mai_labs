is_node(X) :-
    sub_string(X, 0, 4, _, 'ВЕРШИНА ').

is_answer(X) :-
    sub_string(X, 0, 4, _, 'ОТВЕТ ').

get_next(Choice, Title, ResList) :-
    edge(Choice, Title),
    get_variants(Title, [], ResList).

is_exist_else(Title, Curr, X) :-
    edge(Title, X),
    not(member(X, Curr)).

get_variants(Title, Curr, ResList) :-
    is_exist_else(Title, Curr, H),
    (get_variants(Title, [H|Curr], ResList), !;
    ResList = [H|Curr]).

edge('ВЕРШИНА КОРЕНЬ', 'ВЕРШИНА ЦВЕТ').

edge('ВЕРШИНА ЦВЕТ', 'синий').
edge('ВЕРШИНА ЦВЕТ', 'зеленый').
edge('ВЕРШИНА ЦВЕТ', 'красный').
edge('ВЕРШИНА ЦВЕТ', 'розовый').
edge('ВЕРШИНА ЦВЕТ', 'желтый').

edge('синий', 'ВЕРШИНА НАЗНАЧЕНИЕ').
edge('зеленый', 'ВЕРШИНА НАЗНАЧЕНИЕ').
edge('красный', 'ВЕРШИНА НАЗНАЧЕНИЕ').
edge('розовый', 'ВЕРШИНА НАЗНАЧЕНИЕ').
edge('желтый', 'ВЕРШИНА НАЗНАЧЕНИЕ').

edge('ВЕРШИНА НАЗНАЧЕНИЕ', 'хоккейные').
edge('ВЕРШИНА НАЗНАЧЕНИЕ', 'беговые').

edge('хоккейные', 'ВЕРШИНА ХОККЕЙНЫЕ УРОВЕНЬ').
edge('беговые', 'ВЕРШИНА БЕГОВЫЕ ДИСЦИПЛИНА').

edge('ВЕРШИНА ХОККЕЙНЫЕ УРОВЕНЬ', 'хоккейные любитель').
edge('ВЕРШИНА ХОККЕЙНЫЕ УРОВЕНЬ', 'хоккейные про').

edge('хоккейные любитель', 'ОТВЕТ ХОККЕЙНЫЕ ЛЮБИТЕЛЬ').
edge('ОТВЕТ ХОККЕЙНЫЕ ЛЮБИТЕЛЬ', 'компания 3').
edge('ОТВЕТ ХОККЕЙНЫЕ ЛЮБИТЕЛЬ', 'компания 4').

edge('хоккейные про', 'ОТВЕТ ХОККЕЙНЫЕ ПРО').
edge('ОТВЕТ ХОККЕЙНЫЕ ПРО', 'компания 1').
edge('ОТВЕТ ХОККЕЙНЫЕ ПРО', 'компания 2').

edge('ВЕРШИНА БЕГОВЫЕ ДИСЦИПЛИНА', 'конькобежные').
edge('ВЕРШИНА БЕГОВЫЕ ДИСЦИПЛИНА', 'шорт трек').

edge('конькобежные', 'ОТВЕТ КОНЬКОБЕЖНЫЕ').
edge('ОТВЕТ КОНЬКОБЕЖНЫЕ', 'компания 3').
edge('ОТВЕТ КОНЬКОБЕЖНЫЕ', 'компания 5').

edge('шорт трек', 'ОТВЕТ ШОРТ ТРЕК').
edge('ОТВЕТ ШОРТ ТРЕК', 'компания 1').
edge('ОТВЕТ ШОРТ ТРЕК', 'компания 6').
