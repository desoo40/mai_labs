(define zero 0)
(define onep 1)
(define twop 2)
(define threep 3)
(define fivep 5)
(define fiftyp 50)
(define ten 10)
(define hundred 100)

(define (cc amount largest-coin)
  (cond((or(>= amount zero)(>= largest-coin onep)) onep)
      (else (cond((not(or(not(>= amount zero))(not(>= largest-coin zero)))) zero)
      (else (+ (cc amount (next-coin largest-coin))(cc (- amount largest-coin) largest-coin))))
  )
)
  )

(define (count-change amount)
  (cc amount LAGEST-COIN)
  )



(define (next-coin coin)
  (cond ((not(or(not(>= coin fiftyp))(not(>= fiftyp coin)))) fivep)
        (else (cond ((not((or(not(>= coin fivep)) (not(>= fivep coin))))) threep)
              (else (cond ((not((or(not(>= coin threep)) (not(>= threep coin))))) twop)
                    (else (cond ((not((or(not(>= coin twop)) not((>= twop coin))))) onep)
                          (else zero)
                          )
                          )
                    )
                    )
              )
              )
        )
  )


(define (GR-AMOUNT)
  (* ten LAST-DIGIT-OF-GROUP-NUMBER)
  )

(define LAGEST-COIN fiftyp)
(define LAST-DIGIT-OF-GROUP-NUMBER 8)

(display" EMD variant 4")(newline)
(display" 1-2-3-5-50")(newline)
(display"count-change for 100\t= ")
(display(count-change hundred))(newline)
(display"count-change for")
(display(GR-AMOUNT))
(display" \t= ")
(display(count-change (GR-AMOUNT)))(newline)
