;  half-interval.ss
(define (one) 1)
(define (two) 2.0e+0)
(define (six) 6)
(define (twelwe) 12)
(define (thirteen) 13)
(define (twenty-nine) 23)
(define (thirty) 30)
(define (tolerance) 1.0e-5)

(define (half-interval-metod a b a-value b-value)
  (set! a-value (fun a))
  (set! b-value (fun b))
  (cond ((or(not(> 0 a-value))(not(> b-value 0)))
         (try a b 0 0))
      (#t (cond ((or(not(> a-value 0))(not(> 0 b-value)))
                  (try b a 0 0))
      (#t(+ b (one)))))))

(define(try neg-point pos-point midpoint test-value)
  (set! midpoint (average neg-point pos-point))
  (set! test-value (fun midpoint))
  (display "+")
  (cond((close-enough? neg-point pos-point) midpoint)
       (#t(cond((> test-value 0)(try neg-point midpoint 0 0))
                (#t (cond((> 0 test-value)(try midpoint pos-point 0 0))
                (#t midpoint))))
           )
  )
 )
(define (close-enough? x y)
  (> (tolerance) (abs (- x y))))
(define (average x y)(* (/(two)) (+ x y)))
(define (root a b temp)
  (set! temp(half-interval-metod a b 0 0))
  (newline)
  (display"interval=\t[")
  (display a)
  (display" , ")
  (display b)
  (display"]\n")
  (display"discrepancy=\t")
  (display(fun temp))(newline)
  (display"root=\t\t")
  (display(if(=(-(- temp b) (one))0)"[bad]" "[good]"))
  temp 
)
(define(fun z)
  (set! z (-(- z (*(/ (thirty))(twenty-nine)))(/ pi)))
;=========================================================
;C++: z - atan(2 * z) - log(pi * z) - 6
;=========================================================
  (-(-(- z
    (atan (* (two) z)))
    (log (* pi z)))
    (six))
)

"SDM variant 29"
(root (twelwe) (thirteen) 0)
