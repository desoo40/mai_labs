;  half-interval.ss
(define (half-interval-metod a b)
  (define a-value 0)
  (define b-value 0)
  (set! a-value (fun a))
  (set! b-value (fun b))
  (cond((and(< a-value 0)(> b-value 0))
              (try a b))
      ((and(> a-value 0)(< b-value 0))
              (try b a))
      (else(+ b 1))
  )
)
(define(try neg-point pos-point)
  (define midpoint 0)
  (define test-value 0)
  (set! midpoint (average neg-point pos-point))
  (display "+")
  (cond((close-enough? neg-point pos-point) midpoint)
       (#t (set! test-value (fun midpoint))
           (cond((> test-value 0)(try neg-point midpoint))
                ((< test-value 0)(try midpoint pos-point))
                (else midpoint))
           )
  )
 )
(define (close-enough? x y)
  (<(abs (- x y))tolerance))
(define (average x y)(/(+ x y)2.))
(define (root a b)
  (define temp 0)
  (set! temp(half-interval-metod a b))
  (newline)
  (display"interval=\t[")
  (display a)
  (display" , ")
  (display b)
  (display"]\n")
  (display"discrepancy=\t")
  (display(fun temp))(newline)
  (display"root=\t\t")
  (display(if(=(- temp b 1)0)"[bad]" "[good]"))
  temp 
)
(define tolerance 0.00001)
(define(fun z)
  (set! z (- z (/ 29 30)(/ pi)))
;=========================================================
;C++: 2*exp(-z) + sin(z+pi) + tan(z) + expt(z-1,2) + 0.17
;=========================================================
  (- z
    (atan (* 2 z))
    (log (* pi z))
    6)
)

" xxx variant 0"
(root 12 13)
