//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShowcaseApp.WPF.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ShowcaseApp.WPF.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
        ///                    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
        ///                    xmlns:controls=&quot;http://schemas.panthernet.ru/graphx/&quot;
        ///                    &gt;
        ///    
        ///    &lt;Style TargetType=&quot;{x:Type controls:VertexControl}&quot;&gt;
        ///        &lt;Setter Property=&quot;Foreground&quot; Value=&quot;{DynamicResource ButtonText}&quot;/&gt;
        ///        &lt;Setter Property=&quot;Template&quot;&gt;
        ///            &lt;Setter.Value&gt;
        ///                &lt;ControlTemplate TargetType [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CommonMiniTemplate {
            get {
                return ResourceManager.GetString("CommonMiniTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example you can see how graph data filtering works. In GraphX you can assign many data filters in a queue that will be applied before graph layout calculation. Original graph remains intact in this case by default. When filtering is active each relayout method call will also refresh visual graph adding new visuals and removing old ones based on the data present in LogicCore.Graph. This approach allows filters to be applied dynamically and shows the results fast..
        /// </summary>
        internal static string DataFilteringText {
            get {
                return ResourceManager.GetString("DataFilteringText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;UserControl x:Class=&quot;ShowcaseApp.WPF.Pages.Mini.EdgesParallel&quot;
        ///             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
        ///             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
        ///             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; 
        ///             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;
        ///             xmlns:wpf=&quot;clr-namespace:ShowcaseApp.WPF&quot;
        ///             xmlns:controls=&quot;http://schemas.panthernet.ru/graphx/&quot;
        ///              [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EdgesParallel {
            get {
                return ResourceManager.GetString("EdgesParallel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example you can see how parallel edges can be handled and customized by GraphX. Edge labels also has special logic for parallel edges to be easily readable.
        ///
        ///Point mouse over the different settings to see tooltips..
        /// </summary>
        internal static string EdgesParallelText {
            get {
                return ResourceManager.GetString("EdgesParallelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example you can see grouped graph at work. Play with different setting to see all the supported features.
        ///
        ///Point mouse over the different settings to see tooltips..
        /// </summary>
        internal static string LayoutGroupedtext {
            get {
                return ResourceManager.GetString("LayoutGroupedtext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;UserControl x:Class=&quot;ShowcaseApp.WPF.Pages.Mini.LayoutVCP&quot;
        ///             xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
        ///             xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
        ///             xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; 
        ///             xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;
        ///             xmlns:wpf=&quot;clr-namespace:ShowcaseApp.WPF&quot;
        ///             xmlns:controls=&quot;http://schemas.panthernet.ru/graphx/&quot;
        ///             xmln [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LayoutVCP {
            get {
                return ResourceManager.GetString("LayoutVCP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;ResourceDictionary xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
        ///                    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
        ///                    xmlns:controls=&quot;http://schemas.panthernet.ru/graphx/&quot;
        ///                    &gt;
        ///
        ///    &lt;Style TargetType=&quot;controls:StaticVertexConnectionPoint&quot; x:Shared=&quot;False&quot;&gt;
        ///        &lt;Setter Property=&quot;Shape&quot; Value=&quot;Circle&quot;/&gt;
        ///
        ///        &lt;Setter Property=&quot;Content&quot;&gt;
        ///            &lt;Setter.Value&gt;
        ///                &lt;Path Stroke=&quot;{DynamicResource Butt [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LayoutVCPTemplate {
            get {
                return ResourceManager.GetString("LayoutVCPTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In this example you can see how VCP (vertex connection points) works. Drag vertices to see VCP behavior in action and play with different settings on a settings panel to customize these behaviors.
        ///
        ///Point mouse over the different settings to see tooltips..
        /// </summary>
        internal static string LayoutVCPText {
            get {
                return ResourceManager.GetString("LayoutVCPText", resourceCulture);
            }
        }
    }
}
